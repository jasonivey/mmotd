name: Build Mmotd

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          #- {
          #    name: "Windows Latest - MSVC",
          #    artifact: "windows-msvc.tar.xz",
          #    os: windows-latest,
          #    cc: "cl",
          #    cxx: "cl",
          #  }
          # - {
          #     name: "Windows Latest - MinGW", artifact: "windows-mingw.tar.xz",
          #     os: windows-latest,
          #     cc: "gcc", cxx: "g++"
          #   }
          - {
              name: "Ubuntu 20.04 - GCC-10 debug",
              artifact: "linux-gcc10-debug.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "gcc-10",
              cxx: "g++-10",
              cxx_standard: 17
            }
          - {
              name: "Ubuntu 20.04 - GCC-10 release",
              artifact: "linux-gcc10-release.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "gcc-10",
              cxx: "g++-10",
              cxx_standard: 17
            }
          - {
              name: "Ubuntu 20.04 - clang-11 debug",
              artifact: "linux-clang11-debug.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "clang-11",
              cxx: "clang++-11",
              cxx_standard: 17
            }
          - {
              name: "Ubuntu 20.04 - clang-11 release",
              artifact: "linux-clang11-release.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "clang-11",
              cxx: "clang++-11",
              cxx_standard: 17
            }
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: seanmiddleditch/gha-setup-ninja@master

      #- name: Set Windows ENV
      #  if: runner.os == 'Windows'
      #  uses: ilammy/msvc-dev-cmd@v1

      - name: Install Linux Clang-11 Dependencies
        if: runner.os == 'Linux' && matrix.config.cxx == 'clang++-11'
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y apt-utils software-properties-common \
            curl libcurl4 libcurl4-openssl-dev pkg-config wget gnupg
          wget -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 apt-key add /tmp/llvm-snapshot.gpg.key
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          sudo apt-get update -y && sudo apt-get install -y build-essential git ca-certificates cmake ninja-build autoconf \
            automake libtool flex bison binutils binutils-dev dpkg dpkg-dev make gdb m4 autotools-dev gdbserver gettext \
            gnu-standards libboost-dev libdw1 libdw-dev libdwarf-dev libdwarf1 dwarfdump elfutils \
            libelf1 libelf-dev libbz2-1.0 libbz2-dev liblzma5 liblzma-dev zlibc zlib1g zlib1g-dev tar unzip zip libcrypt1 \
            libcrypt-dev openssl libssl-dev libllvm11 llvm-11 llvm-11-dev llvm-11-runtime clang-11 clang-tools-11 \
            libclang-common-11-dev libclang-11-dev libclang1-11 clang-format-11 clangd-11 libfuzzer-11-dev lldb-11 lld-11 \
            libc++-11-dev libc++abi-11-dev libomp-11-dev
          sudo apt-get autoclean
          sudo apt-get autoremove
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux GCC-10 Dependencies
        if: runner.os == 'Linux' && matrix.config.cxx == 'g++-10'
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y apt-utils software-properties-common curl libcurl4 \
            libcurl4-openssl-dev pkg-config wget gnupg build-essential git ca-certificates cmake ninja-build \
            autoconf automake libtool flex bison binutils binutils-dev dpkg dpkg-dev make gdb m4 autotools-dev \
            gdbserver gettext gnu-standards libboost-dev libdw1 libdw-dev libdwarf-dev libdwarf1 dwarfdump \
            elfutils libelf1 libelf-dev libbz2-1.0 libbz2-dev liblzma5 liblzma-dev zlibc zlib1g zlib1g-dev \
            tar unzip zip libcrypt1 libcrypt-dev openssl libssl-dev cpp-10 gcc-10 g++-10
          sudo apt-get autoclean
          sudo apt-get autoremove
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Configure
        shell: bash
        run: |
          mkdir build
          CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -GNinja -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}

      - name: Build
        shell: bash
        run: cmake --build build --target all

      - name: Test
        shell: bash
        run: cd build && ctest --verbose --output-on-failure
