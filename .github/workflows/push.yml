name: Mmotd Continuous Integration
on: [push, pull_request]
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "CI build on 'macOS Latest' using 'xcode-apple-clang' and building for Release",
              artifact: "macos-apple-clang-release.tar.xz",
              os: macos-latest,
              build_type: Release,
              cc: "/usr/bin/clang",
              cxx: "/usr/bin/clang++"
            }
          - {
              name: "CI build on 'macOS Latest' using 'xcode-apple-clang' and building for Debug",
              artifact: "macos-apple-clang-debug.tar.xz",
              os: macos-latest,
              build_type: Debug,
              cc: "/usr/bin/clang",
              cxx: "/usr/bin/clang++"
            }
          - {
              name: "CI build on 'macOS Latest' using 'clang-12' and building for Release",
              artifact: "macos-clang-12-release.tar.xz",
              os: macos-latest,
              build_type: Release,
              cc: "/usr/local/opt/llvm@12/bin/clang-12",
              cxx: "/usr/local/opt/llvm@12/bin/clang++"
            }
          - {
              name: "CI build on 'macOS Latest' using 'clang-12' and building for Debug",
              artifact: "macos-clang-12-debug.tar.xz",
              os: macos-latest,
              build_type: Debug,
              cc: "/usr/local/opt/llvm@12/bin/clang-12",
              cxx: "/usr/local/opt/llvm@12/bin/clang++"
            }
          - {
              name: "CI build on 'macOS Latest' using 'clang-13' and building for Release",
              artifact: "macos-clang-13-release.tar.xz",
              os: macos-latest,
              build_type: Release,
              cc: "/usr/local/opt/llvm@13/bin/clang-13",
              cxx: "/usr/local/opt/llvm@13/bin/clang++"
            }
          - {
              name: "CI build on 'macOS Latest' using 'clang-13' and building for Debug",
              artifact: "macos-clang-13-debug.tar.xz",
              os: macos-latest,
              build_type: Debug,
              cc: "/usr/local/opt/llvm@13/bin/clang-13",
              cxx: "/usr/local/opt/llvm@13/bin/clang++"
            }
          - {
              name: "CI build on 'Ubuntu Latest' using 'gcc-10' and building for Debug",
              artifact: "mmotd-ubuntu-x86_64-gcc-10-debug.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "gcc-10",
              cxx: "g++-10"
            }
          - {
              name: "CI build on 'Ubuntu Latest' using 'gcc-10' and building for Release",
              artifact: "mmotd-ubuntu-x86_64-gcc-10-release.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "gcc-10",
              cxx: "g++-10"
            }
          - {
              name: "CI build on 'Ubuntu Latest' using 'gcc-11' and building for Debug",
              artifact: "mmotd-ubuntu-x86_64-gcc-11-debug.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "gcc-11",
              cxx: "g++-11"
            }
          - {
              name: "CI build on 'Ubuntu Latest' using 'gcc-11' and building for Release",
              artifact: "mmotd-ubuntu-x86_64-gcc-11-release.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "gcc-11",
              cxx: "g++-11"
            }
          - {
              name: "CI build on 'Ubuntu Latest' using 'clang-12' and building for Debug",
              artifact: "mmotd-ubuntu-x86_64-clang-12-debug.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "clang-12",
              cxx: "clang++-12"
            }
          - {
              name: "CI build on 'Ubuntu Latest' using 'clang-12' and building for Release",
              artifact: "mmotd-ubuntu-x86_64-clang-12-release.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "clang-12",
              cxx: "clang++-12"
            }
          - {
              name: "CI build on 'Ubuntu Latest' using 'clang-13' and building for Debug",
              artifact: "mmotd-ubuntu-x86_64-clang-13-debug.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "clang-13",
              cxx: "clang++-13"
            }
          - {
              name: "CI build on 'Ubuntu Latest' using 'clang-13' and building for Release",
              artifact: "mmotd-ubuntu-x86_64-clang-13-release.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "clang-13",
              cxx: "clang++-13"
            }
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: seanmiddleditch/gha-setup-ninja@master

      # - name: Get CMake & Ninja
      #   if: runner.os == 'Linux' || runner.os == 'macOS'
      #   uses: symbitic/install-cmake@master
      #   with:
      #     cmake: '3.22.3'
      #     ninja: '1.10.2'

      # - name: Add CMake & Ninja to GITHUB_PATH
      #   if: runner.os == 'Linux' || runner.os == 'macOS'
      #   shell: bash
      #   run: |
      #     if [ -d /opt/hostedtoolcache/cmake/3.22.3/x64/cmake-3.22.3-linux-x86_64/bin ]; then
      #       echo "/opt/hostedtoolcache/cmake/3.22.3/x64/cmake-3.22.3-linux-x86_64/bin" >> $GITHUB_PATH;
      #     fi
      #     if [ -d /opt/hostedtoolcache/ninja/1.10.2/x64 ]; then
      #       echo "/opt/hostedtoolcache/ninja/1.10.2/x64" >> $GITHUB_PATH;
      #     fi

      - name: Install Linux Base Packages
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y apt-utils lsb-release software-properties-common curl \
            libcurl4 libcurl4-openssl-dev pkg-config wget gnupg build-essential git ca-certificates ninja-build \
            autoconf automake libtool flex bison binutils binutils-dev dpkg dpkg-dev make gdb m4 autotools-dev \
            gdbserver gettext gnu-standards libboost-dev libdw1 libdw-dev libdwarf-dev libdwarf1 dwarfdump \
            elfutils libelf1 libelf-dev libbz2-1.0 libbz2-dev liblzma5 liblzma-dev zlibc zlib1g zlib1g-dev \
            tar unzip zip libcrypt1 libcrypt-dev openssl libssl-dev
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
          sudo apt-get update -y && sudo apt-get install -y cmake
          sudo apt-get autoclean && sudo apt-get autoremove && sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux gcc-10 Compiler
        if: runner.os == 'Linux' && matrix.config.cxx == 'g++-10'
        shell: bash
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update -y && sudo apt-get install -y cpp-10 gcc-10 g++-10
          sudo apt-get autoclean && sudo apt-get autoremove && sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux gcc-11 Compiler
        if: runner.os == 'Linux' && matrix.config.cxx == 'g++-11'
        shell: bash
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update -y && sudo apt-get install -y cpp-11 gcc-11 g++-11
          sudo apt-get autoclean && sudo apt-get autoremove && sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux clang-12 Compiler
        if: runner.os == 'Linux' && matrix.config.cxx == 'clang++-12'
        shell: bash
        run: |
          wget -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 apt-key add /tmp/llvm-snapshot.gpg.key
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          sudo apt-get update -y && sudo apt-get install -y libllvm12 llvm-12 llvm-12-dev llvm-12-runtime clang-12 \
            clang-tools-12 libclang-common-12-dev libclang-12-dev libclang1-12 clang-format-12 clangd-12 \
            libfuzzer-12-dev libunwind-12 libunwind-12-dev lldb-12 lld-12 libc++-12-dev libc++abi-12-dev libomp-12-dev
          sudo apt-get autoclean && sudo apt-get autoremove && sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux clang-13 Compiler
        if: runner.os == 'Linux' && matrix.config.cxx == 'clang++-13'
        shell: bash
        run: |
          wget -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 apt-key add /tmp/llvm-snapshot.gpg.key
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          sudo apt-get update -y && sudo apt-get install -y libllvm13 llvm-13 llvm-13-dev llvm-13-runtime clang-13 \
            clang-tools-13 libclang-common-13-dev libclang-13-dev libclang1-13 clang-format-13 clangd-13 \
            libfuzzer-13-dev libunwind-13 libunwind-13-dev lldb-13 lld-13 libc++-13-dev libc++abi-13-dev libomp-13-dev
          sudo apt-get autoclean && sudo apt-get autoremove && sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install macOS apple-clang Compiler
        if: runner.os == 'macOS' && matrix.config.cxx == '/usr/bin/clang++'
        shell: bash
        run: |
          brew install binutils boost cmake coreutils git libtool m4 make ninja openssl@1.1 readline zlib
          sed -i '' -e 's%\"--with-system-zlib\",%\"--with-system-zlib\",\"--enable-install-libiberty\",%g' `brew edit --print-path binutils`
          brew reinstall -s binutils
          echo "LDFLAGS=-L/usr/local/opt/binutils/lib -L/usr/local/opt/zlib/lib -L/usr/local/opt/openssl/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-isystem/usr/local/opt/binutils/include -isystem/usr/local/opt/zlib/include -isystem/usr/local/opt/openssl/include" >> $GITHUB_ENV

      - name: Install macOS clang-12 Compiler
        if: runner.os == 'macOS' && matrix.config.cxx == '/usr/local/opt/llvm@12/bin/clang++'
        shell: bash
        run: |
          brew install binutils boost cmake coreutils git libtool m4 make ninja openssl@1.1 readline zlib llvm@12
          sed -i '' -e 's%\"--with-system-zlib\",%\"--with-system-zlib\",\"--enable-install-libiberty\",%g' `brew edit --print-path binutils`
          brew reinstall -s binutils
          echo "LDFLAGS=-L/usr/local/opt/binutils/lib -L/usr/local/opt/llvm@12/lib -Wl,-rpath,/usr/local/opt/llvm@12/lib -L/usr/local/opt/zlib/lib -L/usr/local/opt/openssl/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-isystem/usr/local/opt/binutils/include -isystem/usr/local/opt/llvm@12/include -isystem/usr/local/opt/zlib/include -isystem/usr/local/opt/openssl/include" >> $GITHUB_ENV
          echo "/usr/local/opt/llvm@12/bin" >> $GITHUB_PATH

      - name: Setup macOS clang-13 Compiler
        if: runner.os == 'macOS' && matrix.config.cxx == '/usr/local/opt/llvm@13/bin/clang++'
        shell: bash
        run: |
          brew install binutils boost cmake coreutils git libtool m4 make ninja openssl@1.1 readline zlib llvm@13
          sed -i '' -e 's%\"--with-system-zlib\",%\"--with-system-zlib\",\"--enable-install-libiberty\",%g' `brew edit --print-path binutils`
          brew reinstall -s binutils
          echo "LDFLAGS=-L/usr/local/opt/binutils/lib -L/usr/local/opt/llvm@13/lib -Wl,-rpath,/usr/local/opt/llvm@13/lib -L/usr/local/opt/zlib/lib -L/usr/local/opt/openssl/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-isystem/usr/local/opt/binutils/include -isystem/usr/local/opt/llvm@13/include -isystem/usr/local/opt/zlib/include -isystem/usr/local/opt/openssl/include" >> $GITHUB_ENV
          echo "/usr/local/opt/llvm@13/bin" >> $GITHUB_PATH

      - name: Configure
        shell: bash
        run: |
          mkdir -p build
          CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake -S . -B build -GNinja \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}

      - name: Build
        shell: bash
        run: cmake --build build --target all

      - name: Test
        shell: bash
        run: cd build && ctest --output-on-failure

      - name: Install
        shell: bash
        run: cmake --install build --prefix build/install_dir

      - name: Package install
        shell: bash
        run: tar -C build/install_dir -cJf ${{ matrix.config.artifact }} .

      - name: Upload artifact
        # If this is being run locally then DO NOT attempt to upload the artifacts
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.artifact }}
          path: ${{ matrix.config.artifact }}
