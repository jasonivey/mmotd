name: Build Mmotd

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "macOS Latest: apple-clang release",
              artifact: "macos-apple-clang-release-${GITHUB_SHA::8}.tar.xz",
              os: macos-latest,
              build_type: Release,
              cc: "/usr/bin/clang",
              cxx: "/usr/bin/clang++"
            }
          - {
              name: "Ubuntu Latest: gcc-10 debug",
              artifact: "mmotd-ubuntu-x86_64-gcc-10-debug-${GITHUB_SHA::8}.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "gcc-10",
              cxx: "g++-10"
            }
          - {
              name: "Ubuntu Latest: gcc-10 release",
              artifact: "mmotd-ubuntu-x86_64-gcc-10-release-${GITHUB_SHA::8}.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "gcc-10",
              cxx: "g++-10"
            }
          - {
              name: "Ubuntu Latest: gcc-11 debug",
              artifact: "mmotd-ubuntu-x86_64-gcc-11-debug-${GITHUB_SHA::8}.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "gcc-11",
              cxx: "g++-11"
            }
          - {
              name: "Ubuntu Latest: gcc-11 release",
              artifact: "mmotd-ubuntu-x86_64-gcc-11-release-${GITHUB_SHA::8}.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "gcc-11",
              cxx: "g++-11"
            }
          - {
              name: "Ubuntu Latest: clang-12 debug",
              artifact: "mmotd-ubuntu-x86_64-clang-12-debug-${GITHUB_SHA::8}.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "clang-12",
              cxx: "clang++-12"
            }
          - {
              name: "Ubuntu Latest: clang-12 release",
              artifact: "mmotd-ubuntu-x86_64-clang-12-release-${GITHUB_SHA::8}.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "clang-12",
              cxx: "clang++-12"
            }
          - {
              name: "Ubuntu Latest: clang-13 debug",
              artifact: "mmotd-ubuntu-x86_64-clang-13-debug-${GITHUB_SHA::8}.tar.xz",
              os: ubuntu-latest,
              build_type: Debug,
              cc: "clang-13",
              cxx: "clang++-13"
            }
          - {
              name: "Ubuntu Latest: clang-13 release",
              artifact: "mmotd-ubuntu-x86_64-clang-13-release-${GITHUB_SHA::8}.tar.xz",
              os: ubuntu-latest,
              build_type: Release,
              cc: "clang-13",
              cxx: "clang++-13"
            }
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install Linux Base Packages
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y apt-utils software-properties-common curl libcurl4 \
            libcurl4-openssl-dev pkg-config wget gnupg build-essential git ca-certificates cmake ninja-build \
            autoconf automake libtool flex bison binutils binutils-dev dpkg dpkg-dev make gdb m4 autotools-dev \
            gdbserver gettext gnu-standards libboost-dev libdw1 libdw-dev libdwarf-dev libdwarf1 dwarfdump \
            elfutils libelf1 libelf-dev libbz2-1.0 libbz2-dev liblzma5 liblzma-dev zlibc zlib1g zlib1g-dev \
            tar unzip zip libcrypt1 libcrypt-dev openssl libssl-dev
          sudo apt-get autoclean
          sudo apt-get autoremove
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux gcc-10
        if: runner.os == 'Linux' && matrix.config.cxx == 'g++-10'
        shell: bash
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update -y && sudo apt-get install -y cpp-10 gcc-10 g++-10
          sudo apt-get autoclean
          sudo apt-get autoremove
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux gcc-11
        if: runner.os == 'Linux' && matrix.config.cxx == 'g++-11'
        shell: bash
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update -y && sudo apt-get install -y cpp-11 gcc-11 g++-11
          sudo apt-get autoclean
          sudo apt-get autoremove
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux clang-12
        if: runner.os == 'Linux' && matrix.config.cxx == 'clang++-12'
        shell: bash
        run: |
          wget -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 apt-key add /tmp/llvm-snapshot.gpg.key
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          sudo apt-get update -y && sudo apt-get install -y libllvm12 llvm-12 llvm-12-dev llvm-12-runtime clang-12 \
            clang-tools-12 libclang-common-12-dev libclang-12-dev libclang1-12 clang-format-12 clangd-12 \
            libfuzzer-12-dev libunwind-12 libunwind-12-dev lldb-12 lld-12 libc++-12-dev libc++abi-12-dev libomp-12-dev
          sudo apt-get autoclean
          sudo apt-get autoremove
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Linux clang-13
        if: runner.os == 'Linux' && matrix.config.cxx == 'clang++-13'
        shell: bash
        run: |
          wget -O /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 apt-key add /tmp/llvm-snapshot.gpg.key
          echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main" | sudo tee -a /etc/apt/sources.list.d/llvm.list
          sudo apt-get update -y && sudo apt-get install -y libllvm13 llvm-13 llvm-13-dev llvm-13-runtime clang-13 \
            clang-tools-13 libclang-common-13-dev libclang-13-dev libclang1-13 clang-format-13 clangd-13 \
            libfuzzer-13-dev libunwind-13 libunwind-13-dev lldb-13 lld-13 libc++-13-dev libc++abi-13-dev libomp-13-dev
          sudo apt-get autoclean
          sudo apt-get autoremove
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install macOS clang-13
        if: runner.os == 'macOS' && matrix.config.cxx == '/usr/bin/clang++'
        shell: bash
        run: |
          brew install binutils boost cmake coreutils git libtool m4 make ninja openssl@1.1 readline zlib
          sed -i '' -e 's%\"--with-system-zlib\",%\"--with-system-zlib\",\"--enable-install-libiberty\",%g' `brew edit --print-path binutils`
          brew reinstall -s binutils
          echo LDFLAGS="-L/usr/local/opt/binutils/lib -L/usr/local/opt/zlib/lib -L/usr/local/opt/openssl/lib" >> $GITHUB_ENV
          echo CPPFLAGS="-isystem/usr/local/opt/binutils/include -isystem/usr/local/opt/zlib/include -isystem/usr/local/opt/openssl/include" >> $GITHUB_ENV

      - name: Configure
        shell: bash
        run: |
          mkdir -p build
          CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake -S . -B build -GNinja \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}

      - name: Build
        shell: bash
        run: cmake --build build --target all

      - name: Test
        shell: bash
        run: cd build && ctest --output-on-failure

      - name: Install
        shell: bash
        run: cmake --install build --prefix build/install_dir

      - name: Package install
        shell: bash
        run: tar -C build/install_dir -cJf ${{ matrix.config.artifact }} .

      - name: Upload artifact
        # If this is being run locally then DO NOT attempt to upload the artifacts
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.artifact }}
          path: ${{ matrix.config.artifact }}
